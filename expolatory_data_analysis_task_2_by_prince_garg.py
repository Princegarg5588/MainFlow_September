# -*- coding: utf-8 -*-
"""Expolatory DATA Analysis Task 2 by PRINCE GARG.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bwE31wHXHA9hrvrVqU7-6DH4K1cLJh1I
"""

from google.colab import drive #to import drive in colab

drive.mount('/content.gdrive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import datetime as dt

df = pd.read_csv('/content.gdrive/My Drive/INDIAvi.csv')
df

df.head()

df.shape

#remove duplicate data

df = df.drop_duplicates()

df.shape

df.info()

df.describe()

#Remove unnevessary Columns
remove = ['thumbnail_link','description']
df = df.drop(columns = remove)

df.info()

#Converting "publish_time" to datetime format

df["publish_time"] = pd.to_datetime(df['publish_time'])

df.head(2)

df['publish_month'] = df['publish_time'].dt.month
df['publish_day'] = df['publish_time'].dt.day
df['publish_hour'] = df['publish_time'].dt.hour

df.head(2)

print (sorted(df["category_id"].unique()))

df.head()

df["category_name"] = np.nan

df.loc[(df["category_id"] == 1), "category_name"] = "Fimls and Animation"
df.loc[(df["category_id"] == 2), "category_name"] = "Vehicles"
df.loc[(df["category_id"] == 10), "category_name"] = "Music"
df.loc[(df["category_id"] == 15), "category_name"] = "Animals"
df.loc[(df["category_id"] == 17), "category_name"] = "Sports"
df.loc[(df["category_id"] == 19), "category_name"] = "Travel"
df.loc[(df["category_id"] == 20), "category_name"] = "Gaming"
df.loc[(df["category_id"] == 22), "category_name"] = "Blogs"
df.loc[(df["category_id"] == 23), "category_name"] = "Comedy"
df.loc[(df["category_id"] == 24), "category_name"] = "Entertainment"
df.loc[(df["category_id"] == 25), "category_name"] = "News and Politics"
df.loc[(df["category_id"] == 26), "category_name"] = "Style"
df.loc[(df["category_id"] == 27), "category_name"] = "Education"
df.loc[(df["category_id"] == 28), "category_name"] = "Science and Technology"
df.loc[(df["category_id"] == 29), "category_name"] = "Non profits and Activism"
df.loc[(df["category_id"] == 30), "category_name"] = "Movies"
df.loc[(df["category_id"] == 43), "category_name"] = "Shows"

df.head()

#Published video per year

df['year'] = df['publish_time'].dt.year
yearly_counts = df.groupby('year')['video_id'].count()

yearly_counts.plot(kind = 'bar', xlabel ='Year',ylabel = 'Total Publush Count', title= 'Video Published per year')

plt.show()

#Views Per Year

yearly_views = df.groupby('year')['views'].sum()

yearly_views.plot(kind = 'bar', xlabel = 'Year', ylabel = "Views", title= "Views per Year")
plt.xticks(rotation = 0)
plt.tight_layout()

plt.show()

views = df.groupby('category_name')['views'].sum().reset_index()

top = views.sort_values(by = 'views', ascending = False).head(5)

plt.bar(top['category_name'], top['views'])
plt.xlabel('Category name',fontsize = 12)
plt.ylabel('Total Views',fontsize = 12)
plt.title('Top 5 Categories',fontsize = 15)
plt.tight_layout()
plt.show()

plt.figure(figsize=(12,6))
sns.countplot(x='category_name', data = df, order= df['category_name'].value_counts().index)
plt.xticks(rotation=90)
plt.title('Video Count by Category')
plt.show()

#Video published per month


per_month = df['publish_month'].value_counts().sort_index()

plt.figure(figsize=(12,6))
sns.barplot(x=per_month.index, y=per_month.values,palette='Blues_r')
plt.title("Videos published per month")
plt.xlabel('Month')
plt.ylabel('No. of Videos')
plt.xticks(rotation = 45)
plt.show()

#Videos published per hour

per_hour = df['publish_hour'].value_counts().sort_index()

plt.figure(figsize=(12,6))
sns.barplot(x=per_hour.index, y=per_hour.values,palette='rocket')
plt.title("Videos published per hour")
plt.xlabel('No. of Day')
plt.ylabel('No. of Videos')
plt.xticks(rotation = 45)
plt.show()

#Likes per category

likes = df.groupby('category_name')['likes'].sum().sort_values(ascending=False)

plt.figure(figsize=(12,6))
sns.barplot(x=likes.index, y=likes.values,palette='Blues')
plt.title("Total likes per Category",fontsize=15)
plt.xlabel('Category',fontsize=12)
plt.ylabel('Likes',fontsize=12)
plt.xticks(rotation = 90)
plt.show()

most_liked_category = likes.idxmax()
print(f"most liked category is{most_liked_category} with {likes.max():,} likes.")

#Dislikes per category


dislikes = df.groupby('category_name')['dislikes'].sum().sort_values(ascending=False)

plt.figure(figsize=(12,6))
sns.barplot(x=dislikes.index, y=dislikes.values,palette='Spectral')
plt.title("Total Dislikes per Category",fontsize=15)
plt.xlabel('Category',fontsize=12)
plt.ylabel('Dislikes',fontsize=12)
plt.xticks(rotation = 90)
plt.show()

most_disliked_category = dislikes.idxmax()
print(f"most liked category is{most_disliked_category} with {dislikes.max():,} likes.")

#Top channel with trending videos

ctv = df.groupby('channel_title').size().reset_index(name="video_count").sort_values("video_count", ascending=False).head(10)

fig,ax = plt.subplots(figsize=(10,10))
sns.barplot(x="video_count", y="channel_title",data = ctv,palette='Spectral', ax=ax)
ax.set(xlabel = "No of Videos", ylabel="Channel Name")
plt.title("Top 10 Trending Videos")

#Videos publish over time

df['publish_time'] = pd.to_datetime(df['publish_time'])
df['publish_date'] = df['publish_time'].dt.date
count_by_date = df.groupby('publish_date').size()
plt.figure(figsize=(12,8))
sns.lineplot(data = count_by_date)
plt.title("Video Published over time")
plt.xlabel("Publish Date")
plt.ylabel("No. of Videos")
plt.xticks(rotation = 45)
plt.show()

#Plot b/w views and likes

sns.scatterplot(data= df, x="views", y= "likes")
plt.title("Views and likes")
plt.xlabel("Views ")
plt.ylabel("likes")
plt.show()

plt.figure(figsize= (14,8))
plt.subplots_adjust(wspace = 0.2, hspace = 0.4, top = 0.9)

plt.subplot(2,2,1)
s= sns.countplot(x="comments_disabled", data =df)
s.set_title("Comments Disabled", fontsize=14)

plt.subplot(2,2,2)
s1= sns.countplot(x="ratings_disabled", data =df)
s1.set_title("Rating Disabled", fontsize=14)

plt.subplot(2,2,3)
s2= sns.countplot(x="video_error_or_removed", data =df)
s2.set_title("Video Error or Removed", fontsize=14)

plt.show()

#correlaton

df.corr()

correlation_matrix = df.corr()
sns.heatmap(correlation_matrix, annot=True, cmap = "Spectral", fmt='.2f')
plt.title("Correlation HeatMap")
plt.show()

